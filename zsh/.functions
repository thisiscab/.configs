#!/bin/zsh

# ############################## #
#       Generic Aliases
# ############################## #

zshperf() {
    shell=${1-$SHELL}
    for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

# `pping` with no arguments ping the IP 8.8.8.8 (usefull for basic internet connection test),
# otherwise ping the given IP. If the IP is incomplete, it is concat with the default
# prefix 192.168.1 allowing easy local ping (eg ping 3.12 => 192.168.3.12)
function pping() {
    ip4regex='^[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+$'
    ip3regex='^[0-9]+[.][0-9]+[.][0-9]+$'
    ip2regex='^[0-9]+[.][0-9]+$'
    ip1regex='^[0-9]+$'
    host=$@
    if [ $# -eq 0 ]; then
        host="8.8.8.8"
    elif [[ $@ =~ $ip4regex ]]; then
        host="$@"
    elif [[ $@ =~ $ip3regex ]]; then
        host="192.$@"
    elif [[ $@ =~ $ip2regex ]]; then
        host="192.168.$@"
    elif [[ $@ =~ $ip1regex ]]; then
        host="192.168.1.$@"
    fi
    ping $host
}

# ############################## #
#       MacOS Aliases
# ############################## #

if [[ "$OSTYPE" == "darwin"* ]]; then
    function take() {
        mkdir -p $1
        cd $1
    }

    function o() {
        if [ $# -eq 0 ]; then
            open .
        else
            open "$@"
        fi
    }
fi

# ############################## #
#       Generic Git Aliases
# ############################## #

function current_branch() {
    git_current_branch
}

function git_current_branch() {
    local ref
    ref=$(command git symbolic-ref --quiet HEAD 2> /dev/null)
    local ret=$?
    if [[ $ret != 0 ]]; then
        [[ $ret == 128 ]] && return  # no git repo.
        ref=$(command git rev-parse --short HEAD 2> /dev/null) || return
    fi
    echo ${ref#refs/heads/}
}

function git_origin_url() {
    local origin
    origin=$(command git remote -v 2> /dev/null)
    local ret=$?
    if [[ $ret == 128 ]] && return  # no git repo.
    if [[ $ret == 0 ]]; then
        local regex="origin.*@(.* )"
        if [[ "$origin" =~ $regex ]]; then
            url="$(echo $match[1] | tr ':' '/' | xargs)"
            echo "https://$url"
        else
            echo "$origin doesn't match" >&2
        fi
    fi
}

function work_in_progress() {
    if $(git log -n 10 2>/dev/null | grep -q -c "wip"); then
        echo "There is a commit with WIP! Do rebase you lazy butt!"
    else
        echo "Commit history clean, there are no WIP commits"
    fi
}

# Check if main exists and use instead of master
function git_main_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local ref
  for ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk,mainline,default}; do
    if command git show-ref -q --verify $ref; then
      echo ${ref:t}
      return
    fi
  done
  echo master
}
function grename() {
  if [[ -z "$1" || -z "$2" ]]; then
    echo "Usage: $0 old_branch new_branch"
    return 1
  fi

  # Rename branch locally
  git branch -m "$1" "$2"
  # Rename branch in origin remote
  if git push origin :"$1"; then
    git push --set-upstream origin "$2"
  fi
}

function ogit() {
    open $(git_origin_url)
}
